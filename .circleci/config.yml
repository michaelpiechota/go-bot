version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.13

jobs:
  test:
    docker:
      - image: circleci/golang:1.14.7
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          name: Run unit tests
          command: |
            make

  deploy:
    docker:
      - image: circleci/golang:1.14.7
    steps:
      - checkout
      - aws-cli/install
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      - run:
          name: Deploy to ${AWS_ENVIRONMENT}
          command: |
            unset  AWS_SESSION_TOKEN

            ci_env=CI_`echo ${CIRCLE_BRANCH%/*}`
            ci_role=ROLE_`echo ${!ci_env} | tr [a-z] [A-Z]`

            abbr_env=ABBR_`echo ${CIRCLE_BRANCH%/*}`
            stage=${!abbr_env}

            temp_role=$(aws sts assume-role \
              --role-arn "${!ci_role}" \
              --role-session-name "$LOGNAME@`hostname -s`")

            export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
            echo ${!ci_env}

workflows:
  version: 2.1
  test-and-deploy:
    jobs:
      - test:
          context: mpiedev
      - deploy:
          context: mpiedev
          requires:
            - test
          filters:
            branches:
              only:
                - develop
                - master
                - /release.*/
